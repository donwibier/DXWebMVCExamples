@{
	var grid = Html.DevExpress().GridView(settings =>
	{
		settings.Name = "GridView";
		settings.CallbackRouteValues = new
		{
			Controller = "Home",
			Action = "GridViewPartial"
		};

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Home", Action = "GridViewPartialAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Home", Action = "GridViewPartialUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Home", Action = "GridViewPartialDelete" };

		settings.Width = Unit.Percentage(100);
		settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
		settings.SettingsPager.PageSize = 30;
		settings.ClientSideEvents.Init = "onMainControlInit";

		settings.SettingsPager.Mode = GridViewPagerMode.EndlessPaging;
		settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.ShowShadow = true;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

		settings.BeforeGetCallbackResult = (s, e) =>
		{
			var g = (MVCxGridView)s;
			if (g.IsNewRowEditing)
				g.SettingsText.PopupEditFormCaption = "Insert new invoice";
			else if (g.IsEditing)
			{
				var orderID = g.GetRowValues(g.EditingRowVisibleIndex, "OrderID");
				g.SettingsText.PopupEditFormCaption = String.Format("Edit Invoice {0}", orderID ?? "");
			}
		};
		settings.SettingsBehavior.AllowFocusedRow = true;

		settings.Toolbars.Add(tb =>
		{
			tb.Enabled = true;
			tb.Position = GridToolbarPosition.Top;
			tb.SettingsAdaptivity.Enabled = true;
			tb.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
			tb.Items.Add(GridViewToolbarCommand.New);
			tb.Items.Add(GridViewToolbarCommand.Edit);
			tb.Items.Add(GridViewToolbarCommand.Delete);
			tb.Items.Add(i =>
			{
				i.Command = GridViewToolbarCommand.Refresh;
				i.BeginGroup = true;

			});
			tb.Items.Add(GridViewToolbarCommand.ShowCustomizationDialog);

			tb.Items.Add(i =>
			{
				i.Text = "Export to";
				i.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ActionsDownload16x16office2013;
				i.BeginGroup = true;
				i.AdaptivePriority = 1;
				i.Items.Add(GridViewToolbarCommand.ExportToPdf);
				i.Items.Add(GridViewToolbarCommand.ExportToDocx);
				i.Items.Add(GridViewToolbarCommand.ExportToRtf);
				i.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Export to XLS";
				i.Items.Add(GridViewToolbarCommand.ExportToXlsx).Text = "Export to XLSX";
			});
		});
		settings.ClientSideEvents.ToolbarItemClick = "onMainControlToolbarItemClick";
		settings.SettingsExport.EnableClientSideExportAPI = true;
		settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.DataAware;

		settings.SettingsBehavior.ConfirmDelete = true;

		settings.CommandColumn.Visible = false;
		settings.CommandColumn.ShowNewButton = true;
		settings.CommandColumn.ShowDeleteButton = true;
		settings.CommandColumn.ShowEditButton = true;

		settings.KeyFieldName = "OrderID";

		settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = true;
		settings.Settings.ShowFilterRow = true;
		settings.SettingsBehavior.AllowSelectByRowClick = true;
		settings.SettingsCustomizationDialog.Enabled = true;

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 2;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;

		settings.EditFormLayoutProperties.ColCount = 2;
		settings.EditFormLayoutProperties.AlignItemCaptionsInAllGroups = true;
		settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
		settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
		settings.SettingsPopup.EditForm.ShowViewportScrollbarWhenModal = true;
		settings.HtmlEditFormCreated += (s, e) =>
		{
			ASPxGridViewEditFormEventArgs g = e as ASPxGridViewEditFormEventArgs;
			ASPxPopupControl pu = g.EditForm.NamingContainer as ASPxPopupControl;
			pu.ClientSideEvents.PopUp = "onEditOrdersPopup";
			pu.ClientSideEvents.CloseUp = "onEditOrdersCloseUp";
		};


		settings.Columns.Add("OrderID");
		settings.Columns.Add(c =>
		{
			c.FieldName = "CustomerID";
			c.Caption = "Customer";
			c.EditorProperties().ComboBox(p =>
			{
				p.TextField = "CompanyName";
				p.ValueField = "CustomerID";
				p.DataSource = ViewBag.LookupCustomers;
			});
		});
		settings.Columns.Add(c =>
		{
			c.FieldName = "EmployeeID";
			c.Caption = "Employee";
			c.EditorProperties().ComboBox(p =>
			{
				p.TextField = "Name";
				p.ValueField = "EmployeeID";
				p.DataSource = ViewBag.LookupEmployees;
			});
		});
		settings.Columns.Add("OrderDate", MVCxGridViewColumnType.DateEdit);
		settings.Columns.Add("RequiredDate", MVCxGridViewColumnType.DateEdit).AdaptivePriority = 1;
		settings.Columns.Add("ShippedDate", MVCxGridViewColumnType.DateEdit);
		settings.Columns.Add(c =>
		{
			c.FieldName = "ShipVia";
			c.Caption = "Shipper";
			c.EditorProperties().ComboBox(p =>
			{
				p.TextField = "Name";
				p.ValueField = "ShipperID";
				p.DataSource = ViewBag.LookupShippers;
			});
		});
		settings.Columns.Add("ShipName");
		settings.Columns.Add("ShipAddress");
		settings.Columns.Add("ShipCity");
		settings.Columns.Add("ShipRegion").AdaptivePriority=2;
		settings.Columns.Add("ShipPostalCode").AdaptivePriority=2;
		settings.Columns.Add("ShipCountry").AdaptivePriority=2;


	});
	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()